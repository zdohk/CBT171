./ ADD NAME=$$NOTE1  0100-07361-07361-1235-00022-00022-00000-SBGOLOB
Subject:    Emailing: dli.utils.src
From:       "Rice, Richard L" <Richard.L.Rice@conocophillips.com>
Date:       Fri, 14 Dec 2007 10:26:57 -0600
To:         "Sam Golob" <sbgolob@cbttape.org>

 <<dli.utils.src>>

Sam,
This is a pair of DL/I utilities.
This is in the TRANSMIT/FTP format.

They were intended to be an IMS version independent back-up/restore.
DLIUNLD will read any IMS DL/I data base with segments up to 32744 bytes
long.

DLIUNLD has been run and tested.

DLILOAD has been debugged by a user.  See member $$NOTE2.

Both utilities keep statistics.  The statistics on a load should match
the statistics for the un-load.

./ ADD NAME=$$NOTE2  0100-07361-07361-1237-00014-00014-00000-SBGOLOB
Subject:    Emailing: dliutils
From:       "Rice, Richard L" <Richard.L.Rice@conocophillips.com>
Date:       Thu, 27 Dec 2007 11:07:49 -0600
To:         "Sam Golob" <sbgolob@cbttape.org>

Sam,

I finally heard from someone that tried using DLILOAD.
There were a couple of bugs.  They have been corrected.
DLIUNLD has been used and tested for a long time.

I think you were going to call them DLIUTILS.


./ ADD NAME=$DOC     0100-07361-07361-1058-00008-00008-00000-RLRICE
To install
 1) Add a valid job card
 2) change the IMS MACLIB data set name
 3) change the IMS RESLIB data set name
 4) change library name on the SYSLMOD DDs
 5) Run DLILOAD and DLIUNLD to assemble and link the programs

Neither program requires APF authorization
./ ADD NAME=DLILOAD  0106-07341-07361-1059-00365-00366-00000-RLRICE
//         JOB
//* ------------------------------------------------------------
//*
//*          ASSEMBLE
//*
//* ------------------------------------------------------------
//ASM      EXEC PGM=ASMA90,PARM='LIST,DECK,NOOBJECT,XREF(SHORT)'
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,PASS,DELETE),
//            UNIT=TSODA,
//            SPACE=(TRK,(15,15,15))
//SYSIN    DD *
* ------------------------------------------------------------------- *
*                                                                     *
*     Re-load a data base from a DLIUNLD unload.                      *
*                                                                     *
*     The program uses the 1st PCB in the PSB.                        *
*                                                                     *
*     Input data is has variable length records (RECFM=V).            *
*                                                                     *
*     Format of input record is:                                      *
*                                                                     *
*         bytes   length    description                               *
*         1 - 2     2       length of record                          *
*         3 - 4     2       binary zero                               *
*         5 -12     8       segment name                              *
*         9 -??             length of segment                         *
*                                                                     *
*                                                                     *
*                                                                     *
*      The program requires two DD's                                  *
*                                                                     *
*        SYSPRINT    SYSOUT=?                                         *
*        SYSUT1      Data to be re-loaded (SYSUT1 from DLIUNLD)       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DLILOAD  CSECT
DLILOAD  AMODE 31
DLILOAD  RMODE 24
         USING DLILOAD,R15             SPECIFY CSECT BASE
         B     INIT0000
         DC    CL8'DLILOAD'            DATE AND TIME COMPILED
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 LOAD NEW BASE REGISTER
         DROP  R15                     DISCONTINUE OLD BASE
         USING DLILOAD,R12             RESUME WITH A NEW BASE
         L     R11,0(R1)               PCB ADDRESS
         USING PCB,R11
         GETMAIN RU,                   GETMAIN WORK AREA               +
               LV=WORKL,                                               +
               LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING WORKAREA,R13            SPECIFY THIRD BASE
         ST    R11,IMS_PCB
         MVC   WORK_TAPE(TAPEDCBL),TAPEDCBI
         MVC   WORK_PRINTER(PRINTDCBL),PRINTDCBI
         MVC   WORK_OPEN(OPENL),OPENI
         MVC   WORK_CLOSE(CLOSEL),CLOSEI
         MVI   PLINE-1,C' '
         MVC   PLINE,PLINE-1
         MVI   WORK_SEGMENT_NAME+8,C' '
         LA    R1,F4                   NBR OF IMS PARMS
         ST    R1,IMS_COUNT            SET ADDRESS
         LA    R1,ISRT                 IMS FUNCTION CODE
         ST    R1,IMS_FUNCTION         SET ADDRESS
         ST    R11,IMS_PCB             SET PCB ADDRESS
         LA    R1,TAPE_IO_AREA         I/O AREA ADDRESS
         ST    R1,IMS_IO_AREA          SET ADDRESS
         LA    R1,WORK_SSA             SSA ADDRESS
         ST    R1,IMS_SSA_ADDRESS      SET ADDRESS
         OI    IMS_SSA_ADDRESS,X'80'   FLAG END OF PARM LIST
         OPEN  (WORK_TAPE,INPUT),                                      +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
         OPEN  (WORK_PRINTER,OUTPUT),                                  +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
         MVC   PLINE,PLINE-1
         MVC   PLINE(HEADING_L),HEADING
         BAL   R9,PRT0000              WRITE HEADING
* ------------------------------------------------------------------- *
*               INITIALIZE STATISTICS                                 *
* ------------------------------------------------------------------- *
         ZAP   WORK_TOTAL_SEGMENTS,P0  INITIALIZE TOTAL NBR OF SEGMENTS
         LA    R15,$MAX_STATS          NBR OF STATUS COUNTERS
         LA    R5,STATS_TABLE
         USING STATS,R5
INIT0030 DS    0H
         MVC   STATS_SEGMENT,BLANKS    INITIALIZE SEGMENT NAME
         ZAP   STATS_NBR,P0            INITIALIZE NBR OF SEGMENTS
         LA    R5,STATS_L(,R5)         NEXT IN TABLE
         BCT   R15,INIT0030            LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        READ BACK UP                                                 *
*                                                                     *
*-------------------------------------------------------------------- *
MAIN0000 DS    0H
         GET   WORK_TAPE,TAPE_RECORD
* ------------------------------------------------------------------- *
*        INSERT THE SEGENT                                            *
*-------------------------------------------------------------------- *
         MVC   WORK_SEGMENT_NAME,TAPE_SEGMENT_NAME
         LA    R1,IMSPARMS              IMS PARM LIST
         CALL  ASMTDLI                  CALL IMS
*-------------------------------------------------------------------- *
*               CHECK STATUS CODE                                     *
*-------------------------------------------------------------------- *
MAIN0010 DS    0H
         CLC   PCB_STATUS_CODE,BLANKS   BLANKS?
         BE    MAIN0020                 YES
         B     ERR0010                  OTHERWISE.. BAD NEWS
*-------------------------------------------------------------------- *
*               UPDATE STATISTICS                                     *
*-------------------------------------------------------------------- *
MAIN0020 DS    0H
         AP    WORK_TOTAL_SEGMENTS,P1   ADD 1 TO NUMBER OF SEGMENTS
         LA    R5,STATS_TABLE
MAIN0030 DS    0H
         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?
         BE    MAIN0040                 YES
         CLC   STATS_SEGMENT,TAPE_SEGMENT_NAME
         BE    MAIN0050
         LA    R5,STATS_L(,R5)          NEXT IN STATS TABLE
         B     MAIN0030                 CHECK AGAIN
MAIN0040 DS    0H
         MVC   STATS_SEGMENT,TAPE_SEGMENT_NAME
MAIN0050 DS    0H
         AP    STATS_NBR,P1             ADD 1
         B     MAIN0000                 READ NEXT SEGMENT
* ------------------------------------------------------------------- *
*                                                                     *
*                     ERROR ROUTINES                                  *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PLINE(MSG_01_L),MSG_01
         MVC   PLINE+(MSG_01_STATUS-MSG_01)(L'MSG_01_STATUS),PCB_STATUS+
               _CODE
         BAL   R9,PRT0000
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*                     PRINT STATISTICS                                *
*                                                                     *
* ------------------------------------------------------------------- *
STATS000 DS    0H
         MVC   PLINE(MSG_02_L),MSG_02   COPY MESSAGE
         BAL   R9,PRT0000               PRINT MESSAGE
         LA    R5,STATS_TABLE
STATS010 DS    0H
         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?
         BE    STATS020                 YES
         MVC   PLINE(MSG_03_L),MSG_03
         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),STATS_SE+
               GMENT
         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),STATS_NBR
         BAL   R9,PRT0000               PRINT STATUS
         LA    R5,STATS_L(,R5)          NEXT SEGMENT
         B     STATS010
STATS020 DS    0H
         MVC   PLINE(MSG_03_L),MSG_03
         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),TOTAL
         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),WORK_TOTAL_SEGME+
               NTS
         MVI   PLINE,C'-'               TRIPLE SPACE
         BAL   R9,PRT0000               PRINT STATUS
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         PUT   WORK_PRINTER,PLINE
         MVC   PLINE,PLINE-1
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE WORK_PRINTER,                                           +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         CLOSE WORK_TAPE,                                              +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         LR    R1,R13
         L     R13,4(,R13)              RESTORE REGSITER 13
         FREEMAIN RU,                                                  +
               A=(R1),                                                 +
               LV=WORKL
         L     R14,12(R13)              RESTORE REGISTER 14
         LM    R0,R12,20(R13)           RESTORE REGISTERS 0-12
         SR    R15,R15                  ZERO RETURN CODE
         BR    R14                      RETURN

* ------------------------------------------------------------------- *
*                                                                     *
*                     CONSTANTS/LITERALS                              *
*                                                                     *
* ------------------------------------------------------------------- *
F4              DC    F'4'               ARGUEMENT COUNT
P0              DC    P'0'
P1              DC    P'1'

BLANKS          DC    CL8' '
HEADING         DC    C'1 --- DL/1 DATABASE RE-LOAD UTILITY ---'
HEADING_L       EQU   *-HEADING

MSG_01          DC    C'- ****   BAD STATUS CODE RECEIVED ==> '
MSG_01_STATUS   DC    CL2' '
MSG_01_L        EQU   *-MSG_01

MSG_02          DS    0C
                DC    C' '
                DC    C'SEGMENT NAME'
                DC    C' '
                DC    C'       NUMBER'
MSG_02_L        EQU   *-MSG_02

MSG_03          DS    0C
                DC    C' '
MSG_03_SEGMENT  DC    CL8' '
MSG_03_NBR      DC    X'40206B2020206B2020206B2020206B202120'
MSG_03_L        EQU   *-MSG_03

TOTAL           DC    CL8'TOTAL'
ISRT            DC    CL4'ISRT'         DL/I FUNCTION (INSERT)

PRINTDCBI DCB  DSORG=PS,                                               +
               MACRF=PM,                                               +
               DDNAME=PRINTER,                                         +
               RECFM=FBA,                                              +
               LRECL=132
PRINTDCBL EQU  *-PRINTDCBI
TAPEDCBI  DCB  DSORG=PS,                                               +
               MACRF=GM,                                               +
               DDNAME=TAPE,                                            +
               EODAD=STATS000,                                         +
               RECFM=VB,                                               +
               LRECL=32756
TAPEDCBL  EQU  *-TAPEDCBI

OPENI     OPEN (*,OUTPUT),                                             +
               MODE=31,                                                +
               MF=L
OPENL     EQU  *-OPENI

CLOSEI    CLOSE *,                                                     +
               MODE=31,                                                +
               MF=L
CLOSEL    EQU  *-CLOSEI

               LTORG

* ------------------------------------------------------------------- *
*                                                                     *
*                     WORK AREAS                                      *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA            DSECT
                    DS    18F

WORK_PRINTER        DS    0F,(PRINTDCBL)X
WORK_TAPE           DS    0F,(TAPEDCBL)X
WORK_OPEN           DS    0F,(OPENL)X
WORK_CLOSE          DS    0F,(CLOSEL)X

IMSPARMS            DS    0F
IMS_COUNT           DS    A               COUNT
IMS_FUNCTION        DS    A               FUNCTION
IMS_PCB             DS    A               PCB ADDRESS
IMS_IO_AREA         DS    A               I/O AREA
IMS_SSA_ADDRESS     DS    A

WORK_SSA            DS    0CL9
WORK_SEGMENT_NAME   DS    CL8
                    DS    C               BLANK (UN-QUALIFIED SSA)

WORK_TOTAL_SEGMENTS DS    PL7             NUMBER OF SEGMENTS ON TAPE

STATS_TABLE         DS    ($MAX_STATS*STATS_L)X

                    DS    C
PLINE               DS    CL121

* ------------------------------------------------------------------- *
*                                                                     *
*                 I/O AREA                                            *
*                                                                     *
* ------------------------------------------------------------------- *
TAPE_RECORD         DS    0F
TAPE_LENGTH         DS    H
TAPE_BB             DS    H
TAPE_SEGMENT_NAME   DS    CL8
TAPE_IO_AREA        DS    CL32760         I/O AREA

WORKL               EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
*                 PCB DSECT                                           *
*                                                                     *
* ------------------------------------------------------------------- *
PCB                 DSECT
PCB_DBD             DS    CL8             DATABASE NAME
PCB_LEVEL           DS    CL2             FEED-BACK LEVEL
PCB_STATUS_CODE     DS    CL2             STATUS CODE
PCB_OPTIONS         DS    CL4             PROCESS OPTIONS
PCB_JCB             DS    F               JCB ADDRESS
PCB_SEGMENT         DS    CL8             SEGMENT NAME
PCB_KFA_LENGTH      DS    F               KEY FEED-BACK AREA LENGTH
                    DS    F               NUMBER OF SEN SEGS IN PCB
PCB_KFA             DS    CL75            KEY FEED-BACK AREA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
STATS               DSECT
STATS_SEGMENT       DS    CL8             SEGMENT NAME
STATS_NBR           DS    PL7             NUMBER OF THIS SEGMENT
STATS_L             EQU   *-STATS
$MAX_STATS          EQU   20
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   DLILOAD
//*  --------------------------------------------------
//*
//*  --------------------------------------------------
//LINK     EXEC PGM=HEWLH096,COND=(4,LT),
//            PARM=('LIST,LET,XREF,MAP')
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))
//SYSLIB   DD DSN=......ims reslib....,DISP=SHR
//SYSLMOD  DD DSN=your load lib,DISP=SHR
//OBJ      DD DSN=&&OBJ,DISP=(SHR,PASS)
//SYSLIN   DD *
  INCLUDE OBJ
  ENTRY   DLILOAD
  NAME    DLILOAD(R)
/*
//
./ ADD NAME=DLIUNLD  0123-07158-07361-1059-00392-00302-00000-RLRICE
//         JOB
//* ------------------------------------------------------------
//*
//*          ASSEMBLE
//*
//* ------------------------------------------------------------
//ASM      EXEC PGM=ASMA90,PARM='LIST,DECK,NOOBJECT,XREF(SHORT)'
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=...ims maclib......,DISP=SHR
//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,PASS,DELETE),
//            UNIT=TSODA,
//            SPACE=(TRK,(15,15,15))
//SYSIN    DD *
* ------------------------------------------------------------------- *
*                                                                     *
*     Unload an IMS database to a 'flat' file.                        *
*                                                                     *
*     The program uses the 1st PCB in the PSB.                        *
*                                                                     *
*     Output data is has variable length records (RECFM=V).           *
*                                                                     *
*     Format of output record is:                                     *
*                                                                     *
*         bytes   length    description                               *
*         1 - 2     2       length of record (segment length + 12)    *
*         3 - 4     2       binary zero                               *
*         5 -12     8       segment name                              *
*         9 -??             length of segment (returned by IMS)       *
*                                                                     *
*     The program issues a GSCD call to obtain the address of         *
*     the PST control block (mapped by the IPST macro).               *
*     On each "GN  " call, IMS returns the length of the data         *
*     in the I/O area in field PSTSGCR.                               *
*                                                                     *
*                                                                     *
*     The program requires two DD's                                   *
*                                                                     *
*      SYSPRINT   SYSOUT=?      statistics/messages                   *
*      SYSUT1     unloaded data                                       *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DLIUNLD  CSECT
DLIUNLD  AMODE 31
DLIUNLD  RMODE ANY
         USING DLIUNLD,R15             SPECIFY CSECT BASE
         B     INIT0000
         DC    CL8'DLIUNLD'            DATE AND TIME COMPILED
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 LOAD NEW BASE REGISTER
         DROP  R15                     DISCONTINUE OLD BASE
         USING DLIUNLD,R12             RESUME WITH A NEW BASE
         L     R11,0(R1)               PCB ADDRESS
         USING PCB,R11
         GETMAIN RU,                   GETMAIN WORK AREA               +
               LV=WORKL,                                               +
               LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING WORKAREA,R13            SPECIFY THIRD BASE
         ST    R11,IMS_PCB
         MVC   WORK_TAPE(TAPEDCBL),TAPEDCBI
         MVC   WORK_PRINTER(PRINTDCBL),PRINTDCBI
         MVC   WORK_OPEN(OPENL),OPENI
         MVC   WORK_CLOSE(CLOSEL),CLOSEI
         MVI   PLINE-1,C' '
         MVC   PLINE,PLINE-1
         LA    R1,F3                   NBR OF IMS PARMS
         ST    R1,IMS_COUNT            SET ADDRESS
         LA    R1,WORK_FUNCTION        IMS FUNCTION CODE
         ST    R1,IMS_FUNCTION         SET ADDRESS
         ST    R11,IMS_PCB             SET PCB ADDRESS
         LA    R1,TAPE_IO_AREA         I/O AREA ADDRESS
         ST    R1,IMS_IO_AREA          SET ADDRESS
         OI    IMS_IO_AREA,X'80'       FLAG END OF PARM LIST
         OPEN  (WORK_TAPE,OUTPUT),                                     +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
         OPEN  (WORK_PRINTER,OUTPUT),                                  +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
         MVC   PLINE,PLINE-1
         MVC   PLINE(HEADING_L),HEADING
         BAL   R9,PRT0000              WRITE HEADING
* ------------------------------------------------------------------- *
*               INITIALIZE STATISTICS                                 *
* ------------------------------------------------------------------- *
         ZAP   WORK_TOTAL_SEGMENTS,P0  INITIALIZE TOTAL NBR OF SEGMENTS
         LA    R15,$MAX_STATS          NBR OF STATUS COUNTERS
         LA    R5,STATS_TABLE
         USING STATS,R5
INIT0030 DS    0H
         MVC   STATS_SEGMENT,BLANKS    INITIALIZE SEGMENT NAME
         ZAP   STATS_NBR,P0            INITIALIZE NBR OF SEGMENTS
         LA    R5,STATS_L(,R5)         NEXT IN TABLE
         BCT   R15,INIT0030            LOOP
* ------------------------------------------------------------------- *
*                GET PST ADDRESS                                      *
* ------------------------------------------------------------------- *
         MVC   WORK_FUNCTION,GSCD      SET FUNCTION TO 'GSCD'
         LA    R1,IMSPARMS             PARM LIST
         CALL  ASMTDLI                 CALL IMS
         CLC   PCB_STATUS_CODE,BLANKS  SUCCESSFUL?
         BNE   ERR0010                 NO
         L     R10,TAPE_IO_AREA+4      PST ADDRESS
         USING PST,R10
* ------------------------------------------------------------------- *
*                SET FUNCTION CODE TO 'GN'                            *
* ------------------------------------------------------------------- *
         MVC   WORK_FUNCTION,GN         SET FUNCTION CODE TO 'GN'
* ------------------------------------------------------------------- *
*               MAKE 'GN' CALL                                       *
*--------------------------------------------------------------------*
MAIN0000 DS    0H
         LA    R1,IMSPARMS              IMS PARM LIST
         CALL  ASMTDLI                  CALL IMS
*-------------------------------------------------------------------- *
*               CHECK STATUS CODE                                     *
*-------------------------------------------------------------------- *
MAIN0010 DS    0H
         CLC   PCB_STATUS_CODE,GB       END OF DATA BASE?
         BE    STATS000                 YES
         CLC   PCB_STATUS_CODE,BLANKS   ACCEPTABLE STATUS?
         BE    MAIN0020                 YES
         CLC   PCB_STATUS_CODE,GA       ACCEPTABLE STATUS?
         BE    MAIN0020                 YES
         CLC   PCB_STATUS_CODE,GK       ACCEPTABLE STATUS?
         BE    MAIN0020                 YES
         B     ERR0010                  BAD STATUS
*-------------------------------------------------------------------- *
*               UPDATE STATISTICS                                     *
*-------------------------------------------------------------------- *
MAIN0020 DS    0H
         AP    WORK_TOTAL_SEGMENTS,P1   ADD 1 TO NUMBER OF SEGMENTS
         LA    R5,STATS_TABLE
MAIN0030 DS    0H
         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?
         BE    MAIN0040                 YES
         CLC   STATS_SEGMENT,PCB_SEGMENT
         BE    MAIN0050
         LA    R5,STATS_L(,R5)          NEXT IN STATS TABLE
         B     MAIN0030                 CHECK AGAIN
MAIN0040 DS    0H
         MVC   STATS_SEGMENT,PCB_SEGMENT
MAIN0050 DS    0H
         AP    STATS_NBR,P1             ADD 1
         MVC   TAPE_SEGMENT,PCB_SEGMENT MOVE SEGMENT NAME
*-------------------------------------------------------------------- *
*               WRITE TO OUTPUT                                       *
*-------------------------------------------------------------------- *
         LH    R1,PSTSEGCR              SEGMENT LENGTH
         LA    R1,12(,R1)               PLUS PREFIX LENGTH
         STH   R1,TAPE_LENGTH           STORE LENGTH IN TAPE RECORD
         XC    TAPE_BB,TAPE_BB          CLEAR BB
         PUT   WORK_TAPE,TAPE_LENGTH    WRITE TAPE RECORD
         B     MAIN0000                 READ NEXT SEGMENT
* ------------------------------------------------------------------- *
*                                                                     *
*                     ERROR ROUTINES                                  *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PLINE(MSG_01_L),MSG_01
         MVC   PLINE+(MSG_01_STATUS-MSG_01)(L'MSG_01_STATUS),PCB_STATUS+
               _CODE
         MVC   PLINE+(MSG_01_FUNCTION-MSG_01)(L'MSG_01_FUNCTION),WORK_F+
               UNCTION
         BAL   R9,PRT0000
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*                     PRINT STATISTICS                                *
*                                                                     *
* ------------------------------------------------------------------- *
STATS000 DS    0H
         MVC   PLINE(MSG_02_L),MSG_02   COPY MESSAGE
         BAL   R9,PRT0000               PRINT MESSAGE
         LA    R5,STATS_TABLE
STATS010 DS    0H
         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?
         BE    STATS020                 YES
         MVC   PLINE(MSG_03_L),MSG_03
         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),STATS_SE+
               GMENT
         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),STATS_NBR
         BAL   R9,PRT0000               PRINT STATUS
         LA    R5,STATS_L(,R5)          NEXT SEGMENT
         B     STATS010
STATS020 DS    0H
         MVC   PLINE(MSG_03_L),MSG_03
         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),TOTAL
         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),WORK_TOTAL_SEGME+
               NTS
         MVI   PLINE,C'-'               TRIPLE SPACE
         BAL   R9,PRT0000               PRINT STATUS
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         PUT   WORK_PRINTER,PLINE
         MVC   PLINE,PLINE-1
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE WORK_PRINTER,                                           +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         CLOSE WORK_TAPE,                                              +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         LR    R1,R13
         L     R13,4(,R13)              RESTORE REGSITER 13
         FREEMAIN RU,                                                  +
               A=(R1),                                                 +
               LV=WORKL
         L     R14,12(R13)              RESTORE REGISTER 14
         LM    R0,R12,20(R13)           RESTORE REGISTERS 0-12
         SR    R15,R15                  ZERO RETURN CODE
         BR    R14                      RETURN

* ------------------------------------------------------------------- *
*                                                                     *
*                     CONSTANTS/LITERALS                              *
*                                                                     *
* ------------------------------------------------------------------- *
F3              DC    F'3'               ARGUEMENT COUNT
P0              DC    P'0'
P1              DC    P'1'

BLANKS          DC    CL8' '
HEADING         DC    C'1 --- DL/1 DATABASE UNLOAD UTILITY ---'
HEADING_L       EQU   *-HEADING

MSG_01          DC    C'- ****   BAD STATUS CODE RECEIVED ==> '
MSG_01_STATUS   DC    C' '
                DC    C'  ON '
MSG_01_FUNCTION DC    C'    '
                DC    C' CALL'
MSG_01_L        EQU   *-MSG_01

MSG_02          DS    0C
                DC    C' '
                DC    C'SEGMENT NAME'
                DC    C' '
                DC    C'       NUMBER'
MSG_02_L        EQU   *-MSG_02

MSG_03          DS    0C
                DC    C' '
MSG_03_SEGMENT  DC    CL8' '
MSG_03_NBR      DC    X'40206B2020206B2020206B2020206B202120'
MSG_03_L        EQU   *-MSG_03

TOTAL           DC    CL8'TOTAL'
GSCD            DC    CL4'GSCD'         GET SCD (AND PST) ADDRESS
GN              DC    CL4'GN  '         GET-NEXT
GB              DC    C'GB'
GA              DC    C'GA'
GK              DC    C'GK'

PRINTDCBI DCB  DSORG=PS,                                               +
               MACRF=PM,                                               +
               DDNAME=PRINTER,                                         +
               RECFM=FBA,                                              +
               LRECL=132
PRINTDCBL EQU  *-PRINTDCBI
TAPEDCBI  DCB  DSORG=PS,                                               +
               MACRF=PM,                                               +
               DDNAME=TAPE,                                            +
               RECFM=VB,                                               +
               LRECL=32756,                                            +
               BLKSIZE=32760
TAPEDCBL  EQU  *-TAPEDCBI

OPENI     OPEN (*,OUTPUT),                                             +
               MODE=31,                                                +
               MF=L
OPENL     EQU  *-OPENI

CLOSEI    CLOSE *,                                                     +
               MODE=31,                                                +
               MF=L
CLOSEL    EQU  *-CLOSEI

               LTORG

* ------------------------------------------------------------------- *
*                                                                     *
*                     WORK AREAS                                      *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA            DSECT
                    DS    18F

WORK_PRINTER        DS    0F,(PRINTDCBL)X
WORK_TAPE           DS    0F,(TAPEDCBL)X
WORK_OPEN           DS    0F,(OPENL)X
WORK_CLOSE          DS    0F,(CLOSEL)X

IMSPARMS            DS    0F
IMS_COUNT           DS    A               COUNT
IMS_FUNCTION        DS    A               FUNCTION
IMS_PCB             DS    A               PCB ADDRESS
IMS_IO_AREA         DS    A               I/O AREA

WORK_FUNCTION       DS    CL4
WORK_TOTAL_SEGMENTS DS    PL7             NUMBER OF SEGMENTS ON TAPE

STATS_TABLE         DS    ($MAX_STATS*STATS_L)X

                    DS    C
PLINE               DS    CL121

* ------------------------------------------------------------------- *
*                                                                     *
*                 I/O AREA                                            *
*                                                                     *
* ------------------------------------------------------------------- *
                    DS    0F
TAPE_LENGTH         DS    H
TAPE_BB             DS    H
TAPE_SEGMENT        DS    CL8
TAPE_IO_AREA        DS    CL32760         I/O AREA

WORKL               EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
*                 PCB DSECT                                           *
*                                                                     *
* ------------------------------------------------------------------- *
PCB                 DSECT
PCB_DBD             DS    CL8             DATABASE NAME
PCB_LEVEL           DS    CL2             FEED-BACK LEVEL
PCB_STATUS_CODE     DS    CL2             STATUS CODE
PCB_OPTIONS         DS    CL4             PROCESS OPTIONS
PCB_JCB             DS    F               JCB ADDRESS
PCB_SEGMENT         DS    CL8             SEGMENT NAME
PCB_KFA_LENGTH      DS    F               KEY FEED-BACK AREA LENGTH
                    DS    F               NUMBER OF SEN SEGS IN PCB
PCB_KFA             DS    CL75            KEY FEED-BACK AREA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
STATS               DSECT
STATS_SEGMENT       DS    CL8             SEGMENT NAME
STATS_NBR           DS    PL7             NUMBER OF THIS SEGMENT
STATS_L             EQU   *-STATS
$MAX_STATS          EQU   20
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IPST
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         REQUATE
         END   DLIUNLD
//*  --------------------------------------------------
//*
//*  --------------------------------------------------
//LINK     EXEC PGM=HEWLH096,COND=(4,LT),
//            PARM=('LIST,LET,XREF,MAP')
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))
//SYSLIB   DD DSN=ims reslib...,DISP=SHR
//SYSLMOD  DD DSN=your load lib,DISP=SHR
//OBJ      DD DSN=&&OBJ,DISP=(SHR,PASS)
//SYSLIN   DD *
  INCLUDE OBJ
  ENTRY   DLIUNLD
  NAME    DLIUNLD(R)
/*
//
./ ADD NAME=DLIUTIL$ 0100-07352-07352-2249-00022-00022-00000-SBGOLOB
Subject:    Emailing: dli.utils.src
From:       "Rice, Richard L" <Richard.L.Rice@conocophillips.com>
Date:       Fri, 14 Dec 2007 10:26:57 -0600
To:         "Sam Golob" <sbgolob@cbttape.org>

 <<dli.utils.src>>

Sam,
This is a pair of DL/I utilities.
This is in the TRANSMIT/FTP format.

They were intended to be an IMS version independent back-up/restore.
DLIUNLD will read any IMS DL/I data base with segments up to 32744 bytes
long.

DLIUNLD has been run and tested.

DLILOAD was tried by a user and the bugs have been fixed.

Both utilities keep statistics.  The statistics on a load should match
the statistics for the un-load.

